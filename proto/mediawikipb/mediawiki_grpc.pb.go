// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/mediawiki.proto

package mediawikipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MediaWiki_GetViews_FullMethodName       = "/mediawiki.MediaWiki/GetViews"
	MediaWiki_GetThumbnails_FullMethodName  = "/mediawiki.MediaWiki/GetThumbnails"
	MediaWiki_GetPagesInBbox_FullMethodName = "/mediawiki.MediaWiki/GetPagesInBbox"
)

// MediaWikiClient is the client API for MediaWiki service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaWikiClient interface {
	GetViews(ctx context.Context, in *GetViewsRequest, opts ...grpc.CallOption) (*GetViewsResponse, error)
	GetThumbnails(ctx context.Context, in *GetThumbnailsRequest, opts ...grpc.CallOption) (*GetThumbnailsResponse, error)
	GetPagesInBbox(ctx context.Context, in *GetPagesInBboxRequest, opts ...grpc.CallOption) (*GetPagesInBboxResponse, error)
}

type mediaWikiClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaWikiClient(cc grpc.ClientConnInterface) MediaWikiClient {
	return &mediaWikiClient{cc}
}

func (c *mediaWikiClient) GetViews(ctx context.Context, in *GetViewsRequest, opts ...grpc.CallOption) (*GetViewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetViewsResponse)
	err := c.cc.Invoke(ctx, MediaWiki_GetViews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaWikiClient) GetThumbnails(ctx context.Context, in *GetThumbnailsRequest, opts ...grpc.CallOption) (*GetThumbnailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetThumbnailsResponse)
	err := c.cc.Invoke(ctx, MediaWiki_GetThumbnails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaWikiClient) GetPagesInBbox(ctx context.Context, in *GetPagesInBboxRequest, opts ...grpc.CallOption) (*GetPagesInBboxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPagesInBboxResponse)
	err := c.cc.Invoke(ctx, MediaWiki_GetPagesInBbox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaWikiServer is the server API for MediaWiki service.
// All implementations must embed UnimplementedMediaWikiServer
// for forward compatibility.
type MediaWikiServer interface {
	GetViews(context.Context, *GetViewsRequest) (*GetViewsResponse, error)
	GetThumbnails(context.Context, *GetThumbnailsRequest) (*GetThumbnailsResponse, error)
	GetPagesInBbox(context.Context, *GetPagesInBboxRequest) (*GetPagesInBboxResponse, error)
	mustEmbedUnimplementedMediaWikiServer()
}

// UnimplementedMediaWikiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMediaWikiServer struct{}

func (UnimplementedMediaWikiServer) GetViews(context.Context, *GetViewsRequest) (*GetViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViews not implemented")
}
func (UnimplementedMediaWikiServer) GetThumbnails(context.Context, *GetThumbnailsRequest) (*GetThumbnailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThumbnails not implemented")
}
func (UnimplementedMediaWikiServer) GetPagesInBbox(context.Context, *GetPagesInBboxRequest) (*GetPagesInBboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPagesInBbox not implemented")
}
func (UnimplementedMediaWikiServer) mustEmbedUnimplementedMediaWikiServer() {}
func (UnimplementedMediaWikiServer) testEmbeddedByValue()                   {}

// UnsafeMediaWikiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaWikiServer will
// result in compilation errors.
type UnsafeMediaWikiServer interface {
	mustEmbedUnimplementedMediaWikiServer()
}

func RegisterMediaWikiServer(s grpc.ServiceRegistrar, srv MediaWikiServer) {
	// If the following call pancis, it indicates UnimplementedMediaWikiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MediaWiki_ServiceDesc, srv)
}

func _MediaWiki_GetViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaWikiServer).GetViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaWiki_GetViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaWikiServer).GetViews(ctx, req.(*GetViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaWiki_GetThumbnails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThumbnailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaWikiServer).GetThumbnails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaWiki_GetThumbnails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaWikiServer).GetThumbnails(ctx, req.(*GetThumbnailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaWiki_GetPagesInBbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPagesInBboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaWikiServer).GetPagesInBbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaWiki_GetPagesInBbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaWikiServer).GetPagesInBbox(ctx, req.(*GetPagesInBboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaWiki_ServiceDesc is the grpc.ServiceDesc for MediaWiki service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaWiki_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediawiki.MediaWiki",
	HandlerType: (*MediaWikiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetViews",
			Handler:    _MediaWiki_GetViews_Handler,
		},
		{
			MethodName: "GetThumbnails",
			Handler:    _MediaWiki_GetThumbnails_Handler,
		},
		{
			MethodName: "GetPagesInBbox",
			Handler:    _MediaWiki_GetPagesInBbox_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mediawiki.proto",
}
