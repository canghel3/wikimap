name: Main

on:
  push:
    branches:
      - main
      - dev

# Permissions are still required here for the OIDC token
permissions:
  contents: 'read'
  id-token: 'write'

jobs:
    build-and-push:
      name: Build and Push Docker Image
      runs-on: ubuntu-latest
      environment: ${{ github.ref_name }}

      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Authenticate to Google Cloud
          id: auth
          uses: google-github-actions/auth@v2
          with:
            workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
            service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

        - name: Configure Docker
          run: gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev

        - name: Build Docker image
          run: >
            docker build . --tag "${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ vars.REPOSITORY_NAME }}/${{ vars.IMAGE_NAME }}:latest"

        - name: Push Docker image
          run: >
            docker push "${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ vars.REPOSITORY_NAME }}/${{ vars.IMAGE_NAME }}:latest"

    terraform:
      name: Apply Terraform
      runs-on: ubuntu-latest
      environment: ${{ github.ref_name }}
      needs: build-and-push
      outputs:
        backend_url: ${{ steps.apply.outputs.cloud_run_url }}
      # Set TF_VAR_ environment variables, which Terraform automatically uses
      env:
        TF_VAR_GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_GCP_REGION: ${{ vars.GCP_REGION }}
        TF_VAR_REPOSITORY_NAME: ${{ vars.REPOSITORY_NAME }}
        TF_VAR_IMAGE_NAME: ${{ vars.IMAGE_NAME }}
        TF_VAR_FRONTEND_BUCKET_NAME: ${{ vars.FRONTEND_BUCKET_NAME }}
        TF_VAR_CLOUD_RUN_SERVICE_NAME: ${{ vars.CLOUD_RUN_SERVICE_NAME }}

      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Authenticate to Google Cloud
          uses: google-github-actions/auth@v2
          with:
            workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
            service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3

        - name: Terraform Init
          id: init
          working-directory: ./infra
          run: terraform init

        - name: Terraform Plan
          id: plan
          working-directory: ./infra
          run: terraform plan -out=tfplan

        - name: Terraform Apply
          id: apply
          working-directory: ./infra
          run: terraform apply "tfplan"

    build-and-push-frontend:
      name: Build and Push Frontend
      runs-on: ubuntu-latest
      environment: ${{ github.ref_name }}
      needs: terraform

      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Setup Node.js
          uses: actions/setup-node@v4
          with:
            # Use the Node.js version your project requires
            node-version: '20'

        - name: Authenticate to Google Cloud
          uses: google-github-actions/auth@v2
          with:
            workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
            service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

        - name: Configure Frontend Environment
          run: echo "VITE_API_URL=${{ needs.terraform.outputs.backend_url }}" > .env.production

        - name: Install Dependencies & Build Frontend
          run: |
            npm install
            npm run build

        - name: Upload to GCS
          uses: 'google-github-actions/upload-cloud-storage@v2'
          with:
            # The folder created by 'npm run build'
            path: ./src/dist
            # The name of the bucket
            destination: ${{ vars.FRONTEND_BUCKET_NAME }}
            # This ensures the contents of 'dist' are uploaded, not the folder itself
            parent: false